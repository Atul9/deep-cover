#!/usr/bin/env ruby

require "bundler/setup"

$LOAD_PATH.unshift('../covered_deep_cover') if ENV["CC"]
require "deep_cover"
require_relative "../spec/tools"
require 'term/ansicolor'
extend DeepCover::Tools

all_good = true

example = ARGV[0] || 'simple_if'
fn = "./spec/samples/#{example}.rb"
fn = "./spec/branch_cover/#{example}.rb" unless File.exist?(fn)
source = File.exist?(fn) ? File.read(fn) : ARGV[0].gsub(';;', "\n")
groups = DeepCover::Tools::AnnotatedExamplesParser.process(source)
if groups.size == 1 && groups.first.last.size == 1
  lines, _lineno = groups.values.first.values.first
else
  menu = []
  item = -1
  examples = groups.flat_map do |title, examples|
    menu << Term::ANSIColor.green(title) if title
    menu.concat(examples.keys.map {|ex| "  #{item+=1}: #{ex || '(General)'}"})
    examples.values
  end
  if ARGV[1]
    answer = ARGV[1].to_i
  else
    require 'highline'
    puts menu
    answer = HighLine.new.ask(Term::ANSIColor.blue("Which?  "), Integer) { |q| q.in = 0...examples.size }
  end
  lines, _lineno = examples[answer]
end

require 'tempfile'
tmp = Tempfile.new(['example', '.rb'])
fn = tmp.path
File.write(fn, lines.join)

puts "Builtin and DeepCover:\n"
begin
  puts format(fn, builtin_coverage(fn), our_coverage(fn))
rescue Exception => e
  puts "Can't run coverage: #{e.class.name}: #{e}\n#{e.backtrace.join("\n")}"
  all_good = false
end

puts "\nGenerated code:\n"
covered_code = DeepCover.covered_code(fn)

puts format_generated_code(covered_code)
puts "\nParsed code:\n"
begin
  execute_sample(covered_code)
rescue Exception => e
  puts "Can't `execute_sample`:#{e.class.name}: #{e}\n#{e.backtrace.join("\n")}"
  all_good = false
end

module ColorAST
  def fancy_type
    color = case
    when !executable?
      :faint
    when !was_executed?
      :red
    when flow_interrupt_count > 0
      :yellow
    else
      :green
    end
    Term::ANSIColor.send(color, super)
  end
end
DeepCover::Node.send :prepend, ColorAST

puts covered_code.covered_ast
puts "\nBranch coverage:\n"

puts format_branch_cover(covered_code, show_whitespace: !!ENV['W'])

a = covered_code.covered_ast
b = a.children.first
binding.pry
exit(all_good)
