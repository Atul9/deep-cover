#!/usr/bin/env ruby

require "bundler/setup"

require "deep_cover"
require_relative "../spec/tools"
require 'term/ansicolor'
extend DeepCover::Tools

def show_builtin(fn)
  puts format(fn, builtin_coverage(fn))
end

def show_our_cov(fn)
  puts format(fn, our_coverage(fn))
end

example = ARGV[0] || 'simple_if'
fn = "./spec/samples/#{example}.rb"
fn = "./spec/branch_cover/#{example}.rb" unless File.exist?(fn)
unless File.exist?(fn)
  require 'tempfile'
  tmp = Tempfile.new(['example', '.rb'])
  fn = tmp.path
  File.write(fn, ARGV[0])
end
puts "Builtin:\n"
show_builtin(fn)
puts "\nPure Ruby:\n"
cover = show_our_cov(fn)
puts "\nGenerated code:\n"
context = DeepCover.context(fn)
generated_source = context.rewrite_source{|t| Term::ANSIColor.yellow(t)}
puts generated_source
puts "\nParsed code:\n"

module ColorAST
  def fancy_type
    color = executable? ? (was_executed? ? :green : :red) : :faint
    Term::ANSIColor.send(color, super)
  end
end
DeepCover::Node.send :prepend, ColorAST

puts context.covered_ast
puts "\nBranch coverage:\n"

puts format_branch_cover(context, show_whitespace: !!ENV['W'])

a = context.covered_ast
b = a.children.first
binding.pry
